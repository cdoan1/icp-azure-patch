[Unit]
Description=Kubelet Service
Documentation=https://github.com/kubernetes/kubernetes

[Service]
EnvironmentFile=-/etc/environment
ExecStart=/opt/kubernetes/hyperkube kubelet \
  --feature-gates Accelerators=true,ExperimentalCriticalPodAnnotation=true \
  --allow-privileged=true \
  --cadvisor-port=0 \
  --docker-disable-shared-pid \
  --kubeconfig=/var/lib/kubelet/kubelet-config \
  --read-only-port=0 \
  --client-ca-file=/var/lib/kubelet/ca.crt \
  --authentication-token-webhook \
  --anonymous-auth=false \
  {% if network_type != "" -%}
  --network-plugin=cni \
  {% endif -%}
  --pod-manifest-path=/etc/cfc/pods \
  --hostname-override={{ kubelet_nodename | node_name(inventory_hostname, hostvars[inventory_hostname]['ansible_'~kubelet_nodename]) }} \
  --node-ip={{ inventory_hostname }} \
  --cluster-dns={{ cluster_dns }} \
  --cluster-domain={{ cluster_domain }} \
  --pod-infra-container-image={{ pause_image }} \
  {% if cloud_provider != 'none' -%}
  --cloud-provider={{ cloud_provider }} \
  {% if ((inventory_hostname in groups['master']) or (cloud_provider == "azure")) -%}
  --cloud-config={{ cloud_provider_conf }} \
  {% endif -%}
  {% endif -%}
  {% if inventory_hostname not in groups['worker'] -%}
  --eviction-hard=memory.available<100Mi,nodefs.available<100Mi \
  --image-gc-high-threshold=100 \
  --image-gc-low-threshold=100 \
  --housekeeping-interval=15s \
  {% endif -%}
  {%if container_runtime == "containerd" -%}
  --container-runtime=remote \
  --container-runtime-endpoint=/run/containerd/containerd.sock \
  {% endif -%}
  --cgroup-driver={{ cgdriver }} \
  --node-labels={% include "kubelet.service.label.j2" %}\
  --register-with-taints={% include "kubelet.service.taint.j2" %}\
  {{ kubelet_extra_args_str }}

Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
